import pandas as pd
import numpy as np
import fastai
from fastai.tabular import *
from sklearn.metrics import roc_auc_score
import torch

print(fastai.__version__)

def auc_score(y_pred,y_true,tens=True):
    score=roc_auc_score(y_true,torch.sigmoid(y_pred)[:,1])
    if tens:
        score=tensor(score)
    else:
        score=score
    return score

path = 'data/'

cont_names = ['AVProductsInstalled', 'Census_TotalPhysicalRAM', 'Census_PrimaryDiskTotalCapacity', 'Census_SystemVolumeTotalCapacity', 'Census_InternalPrimaryDiagonalDisplaySizeInInches', 'Census_InternalPrimaryDisplayResolutionHorizontal', 'Census_InternalPrimaryDisplayResolutionVertical', 'Census_ProcessorCoreCount', 'primary_drive_c_ratio', 'non_primary_drive_MB', 'aspect_ratio', 'dpi', 'dpi_square', 'MegaPixels', 'Screen_Area', 'ram_per_processor', 'new_num_0', 'new_num_1']
cat_names = ['Wdft_IsGamer', 'OsBuildLab', 'ProductName', 'EngineVersion', 'AppVersion', 'RtpStateBitfield', 'IsSxsPassiveMode', 'DefaultBrowsersIdentifier', 'AVProductsEnabled', 'HasTpm', 'CountryIdentifier', 'OrganizationIdentifier', 'GeoNameIdentifier', 'LocaleEnglishNameIdentifier', 'Platform', 'Processor', 'OsVer', 'OsBuild', 'OsSuite', 'OsPlatformSubRelease', 'SkuEdition', 'IsProtected', 'SMode', 'IeVerIdentifier', 'SmartScreen', 'Firewall', 'UacLuaenable', 'Census_MDC2FormFactor', 'Census_DeviceFamily', 'Census_ProcessorManufacturerIdentifier', 'Census_ProcessorClass', 'Census_PrimaryDiskTypeName', 'Census_HasOpticalDiskDrive', 'Census_ChassisTypeName', 'Census_PowerPlatformRoleName', 'AVProductStatesIdentifier', 'Census_ActivationChannel', 'Census_FirmwareManufacturerIdentifier', 'Census_FlightRing','Census_GenuineStateName','Census_IsAlwaysOnAlwaysConnectedCapable','Census_IsFlightingInternal','Census_IsPenCapable','Census_IsPortableOperatingSystem','Census_IsSecureBootEnabled','Census_IsTouchEnabled','Census_IsVirtualDevice','Census_IsWIMBootEnabled','Census_OEMNameIdentifier','Census_OSBranch','Census_OSBuildNumber','Census_OSEdition','Census_OSInstallLanguageIdentifier','Census_OSUILocaleIdentifier', 'Census_OSWUAutoUpdateOptionsName','Census_ProcessorModelIdentifier','Census_ThresholdOptIn','Census_ThresholdOptIn','Wdft_RegionIdentifier', 'Month', 'Week', 'Day', 'Dayofweek', 'Dayofyear', 'Is_month_end', 'Is_month_start', 'HighRam', 'LowSystemDisk', 'LowDisk']
dep_var = 'HasDetections'

layers = [1000, 500]
batch_size = 512
numRows= 8921483

allNames = cat_names + cont_names + [dep_var]
procs = [FillMissing, Categorify, Normalize]

train_df = pd.read_csv(path + '4_train_features.csv', nrows=numRows, usecols=allNames)

data = (TabularList.from_df(train_df,  path=path, cat_names=cat_names, cont_names=cont_names, procs=procs)
                        .random_split_by_pct(valid_pct=0.01)
                        .label_from_df(cols=dep_var)
                        .databunch(bs=batch_size))

learn = tabular_learner(data, layers=[10000, 500], ps=[0.2, 0.1], emb_drop=0.04, metrics=[accuracy,auc_score])
learn.fit_one_cycle(6, 1e-4)
learn.fit(5, 1e-5)
learn.export()

