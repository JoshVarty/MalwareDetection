import pandas as pd
import numpy as np
import fastai
from fastai.tabular import *
from sklearn.metrics import roc_auc_score
import torch

print(fastai.__version__)

# def auc_score(y_pred,y_true,tens=True):
#     score=roc_auc_score(y_true,torch.sigmoid(y_pred)[:,1])
#     if tens:
#         score=tensor(score)
#     else:
#         score=score
#     return score

def trainWithParameters(input, layers, cat_names, cont_names, batch_size=64):
    print()
    print("input: ", input)
    print("layers: ", layers)
    print("cat_names: ", cat_names)
    print("cont_names: ", cont_names)

    path = 'data/'
    train_df = pd.read_csv(input, nrows=3000000)

    dep_var = 'HasDetections'
    procs = [FillMissing, Categorify, Normalize]

    data = (TabularList.from_df(train_df,  path=path, cat_names=cat_names, cont_names=cont_names, procs=procs)
                            .random_split_by_pct(valid_pct=0.5)
                            .label_from_df(cols=dep_var)
                            .databunch(bs=batch_size))

    learn = tabular_learner(data, layers=layers, ps=[0.1, 0.1], emb_drop=0.04, metrics=[accuracy])


    learn.fit_one_cycle(1, 1e-4)

    learn.export()
    
if __name__ == "__main__":
    cont_names = ['Census_PrimaryDiskTotalCapacity', 'Census_SystemVolumeTotalCapacity', 'Census_InternalPrimaryDiagonalDisplaySizeInInches', 'Census_InternalPrimaryDisplayResolutionHorizontal', 'Census_InternalPrimaryDisplayResolutionVertical', 'Census_ProcessorCoreCount']
    cat_names = ['Wdft_IsGamer', 'OsBuildLab', 'ProductName', 'EngineVersion', 'AppVersion', 'RtpStateBitfield', 'IsSxsPassiveMode', 'DefaultBrowsersIdentifier', 'AVProductsInstalled', 'AVProductsEnabled', 'HasTpm', 'CountryIdentifier', 'OrganizationIdentifier', 'GeoNameIdentifier', 'LocaleEnglishNameIdentifier', 'Platform', 'Processor', 'OsVer', 'OsBuild', 'OsSuite', 'OsPlatformSubRelease', 'SkuEdition', 'IsProtected', 'SMode', 'IeVerIdentifier', 'SmartScreen', 'Firewall', 'UacLuaenable', 'Census_MDC2FormFactor', 'Census_DeviceFamily', 'Census_ProcessorManufacturerIdentifier', 'Census_ProcessorClass', 'Census_PrimaryDiskTypeName', 'Census_HasOpticalDiskDrive', 'Census_ChassisTypeName', 'Census_PowerPlatformRoleName']
    trainWithParameters('data/3_train_threshold.csv', [1000, 500], cat_names, cont_names, 512)